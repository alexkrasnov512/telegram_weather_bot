from geopy import geocoders
import requests
from datetime import datetime


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
def cord_of_city(city: str):
    geolocator = geocoders.Nominatim(user_agent='telebot')
    latitude = geolocator.geocode(city).latitude
    longitude = geolocator.geocode(city).longitude
    return [latitude, longitude]


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –æ–±—â–µ–π –ø–æ–≥–æ–¥—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±–µ—Ä–µ—Ç—Å—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≥–æ–¥–∞, –ø–æ–≥–æ–¥–∞ –Ω–∞ 7 —á–∞—Å–æ–≤ –∏ –Ω–∞ 7 –¥–Ω–µ–π
def yandex_weather(latitude, longitude, token_yandex: str):
    url_yandex = f'https://api.weather.yandex.ru/v2/forecast?lat={latitude}&lon={longitude}&[lang=ru_RU]'
    yandex_resp = requests.get(url_yandex, headers={'X-Yandex-API-Key': token_yandex})
    conditions = {'clear': '‚òÄ', 'partly-cloudy': 'üå§', 'cloudy': '‚õÖ',
                  'overcast': '‚òÅ', 'drizzle': 'üåß', 'light-rain': 'üåß',
                  'rain': 'üåß', 'moderate-rain': 'üåß', 'heavy-rain': 'üåß',
                  'continuous-heavy-rain': 'üåß', 'showers': 'üåß',
                  'wet-snow': 'üåß', 'light-snow': 'üå®', 'snow': 'üå®',
                  'snow-showers': 'üå®', 'hail': 'üå®', 'thunderstorm': 'üå©',
                  'thunderstorm-with-rain': '‚õà', 'thunderstorm-with-hail': '‚õà'
                  }
    wind_dir = {'nw': '–°–ó', 'n': '–°', 'ne': '–°–í', 'e': '–í', 'se': '–Æ–í', 's': '–Æ', 'sw': '–Æ–ó', 'w': '–ó', 'c': '–®—Ç–∏–ª—å'}
    yandex_json = yandex_resp.json()
    yandex_json['fact']['condition'] = conditions[yandex_json['fact']['condition']]
    yandex_json['fact']['wind_dir'] = wind_dir[yandex_json['fact']['wind_dir']]
    our_day = yandex_json['forecasts'][0]['hours']
    for i in our_day:
        i['condition'] = conditions[i['condition']]
        i['wind_dir'] = wind_dir[i['wind_dir']]
    next_day = yandex_json['forecasts'][1]['hours']
    for i in next_day:
        i['condition'] = conditions[i['condition']]
        i['wind_dir'] = wind_dir[i['wind_dir']]
    for i in yandex_json['forecasts']:
        for k, v in i['parts'].items():
            v['wind_dir'] = wind_dir[v['wind_dir']]
            v['condition'] = conditions[v['condition']]
    return yandex_json


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–≥–æ–¥—É
def fact_weather(weather):
    weatherfact = dict()
    params = {'temp': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'condition': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è', 'wind_dir': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞',
              'pressure_mm': '–î–∞–≤–ª–µ–Ω–∏–µ', 'wind_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞', 'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å'}
    for i in params:
        weatherfact[params[i]] = weather['fact'][i]
    return weatherfact


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def opredel(times_of_day):
    time_day_dict = dict()
    params = {'temp_min': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temp_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
              'temp_avg': '–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'wind_dir': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞',
              'pressure_mm': '–î–∞–≤–ª–µ–Ω–∏–µ', 'wind_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞', 'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
              'condition': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'}
    for i in params:
        time_day_dict[params[i]] = times_of_day[i]

    return time_day_dict


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –Ω–∞ 7 –¥–Ω–µ–π
def weather_on_7_days(weather):
    future = []
    times_of_day = {'morning': '–£—Ç—Ä–æ', 'day': '–î–µ–Ω—å', 'evening': '–í–µ—á–µ—Ä', 'night': '–ù–æ—á—å'}
    for i in weather['forecasts']:
        weather_for_days = dict()
        params_for_day = {'date': '–ß–∏—Å–ª–æ', 'sunrise': '–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞', 'sunset': '–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞'}
        for y in params_for_day:
            weather_for_days[params_for_day[y]] = i[y]
        for z in times_of_day:
            weather_for_days[times_of_day[z]] = opredel(i['parts'][z])
        future.append(weather_for_days)
    return future


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –Ω–∞ 7 —á–∞—Å–æ–≤
def weather_on_7_hours(weather):
    weather_7_hours = list()
    time_hour = datetime.now().hour
    weather_on_hours = weather['forecasts'][0]['hours']
    weather_on_hours_next_day = weather['forecasts'][1]['hours']
    params_for_hours = {'hour': '–í—Ä–µ–º—è', 'temp': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'condition': '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
                        'wind_dir': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞', 'pressure_mm': '–î–∞–≤–ª–µ–Ω–∏–µ',
                        'wind_speed': '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞', 'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å', 'icon': '–ò–∫–æ–Ω–∫–∞'}
    if time_hour+8 <= 24:
        for i in weather_on_hours[time_hour+1:time_hour+8]:
            mydict = dict()
            for y in params_for_hours:
                mydict[params_for_hours[y]] = i[y]
            weather_7_hours.append(mydict)
        return weather_7_hours
    else:
        counter = 0
        for i in weather_on_hours[time_hour+1:]:
            mydict = dict()
            for y in params_for_hours:
                mydict[params_for_hours[y]] = i[y]
            weather_7_hours.append(mydict)
            counter += 1
        for i in weather_on_hours_next_day[:7-counter]:
            mydict = dict()
            for y in params_for_hours:
                mydict[params_for_hours[y]] = i[y]
            weather_7_hours.append(mydict)
        return weather_7_hours
